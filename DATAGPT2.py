import streamlit as st
import pandas as pd
import openai

# Streamlit sayfa ayarÄ±
st.set_page_config(page_title="Sales Analysis with Chatbot", layout="wide")
st.title("ğŸ“Š Sales Data Analyzer + Chatbot")

# OpenAI API anahtarÄ±nÄ± gizli dosyadan alÄ±r
openai.api_key = st.secrets["openai_api_key"]

# Dosya yÃ¼kleme
uploaded_file = st.file_uploader("LÃ¼tfen 'sales_data_sample.csv' dosyasÄ±nÄ± yÃ¼kleyin:", type="csv")

if uploaded_file is not None:
    df = pd.read_csv(uploaded_file, encoding='ISO-8859-1')

    st.subheader("Veri Ã–nizleme")
    st.dataframe(df.head())

    # Tarih sÃ¼tununu dÃ¶nÃ¼ÅŸtÃ¼r
    if "ORDERDATE" in df.columns:
        df["ORDERDATE"] = pd.to_datetime(df["ORDERDATE"], errors='coerce')

    # Temel metrikler
    st.subheader("Temel Ä°statistikler")
    col1, col2, col3 = st.columns(3)
    with col1:
        st.metric("Toplam SatÄ±ÅŸ", f"${df['SALES'].sum():,.2f}")
    with col2:
        st.metric("SipariÅŸ SayÄ±sÄ±", df["ORDERNUMBER"].nunique())
    with col3:
        st.metric("ÃœrÃ¼n SayÄ±sÄ±", df["PRODUCTCODE"].nunique())

    # Ãœlkeye gÃ¶re satÄ±ÅŸ
    st.subheader("Ãœlkeye GÃ¶re Toplam SatÄ±ÅŸlar")
    COUNTRY_SALES = df.groupby("COUNTRY")["SALES"].sum().sort_values(ascending=False)
    st.bar_chart(COUNTRY_SALES)

    # ÃœrÃ¼n kategorisine gÃ¶re satÄ±ÅŸ
    st.subheader("ÃœrÃ¼n Kategorisine GÃ¶re SatÄ±ÅŸlar")
    PRODUCT_SALES = df.groupby("PRODUCTLINE")["SALES"].sum()
    st.bar_chart(PRODUCT_SALES)

    # Zaman serisi grafiÄŸi
    if "ORDERDATE" in df.columns:
        st.subheader("AylÄ±k SatÄ±ÅŸ GrafiÄŸi")
        df_monthly = df.dropna(subset=["ORDERDATE"]).copy()
        df_monthly["Month"] = df_monthly["ORDERDATE"].dt.to_period("M").astype(str)
        monthly_sales = df_monthly.groupby("Month")["SALES"].sum()
        st.line_chart(monthly_sales)

    # Chatbot bÃ¶lÃ¼mÃ¼
    st.subheader("ğŸ¤– Chatbot ile Veri Analizi")
    user_question = st.text_input("Veri hakkÄ±nda bir soru sorun:")

    if user_question:
        data_info = f"SÃ¼tunlar: {', '.join(df.columns)}"
        sample_rows = df.head(3).to_dict(orient="records")

        prompt = (
            f"Elinde ÅŸu yapÄ±ya sahip bir satÄ±ÅŸ verisi var:\n{data_info}\n"
            f"Ã–rnek veriler:\n{sample_rows}\n\n"
            f"KullanÄ±cÄ±nÄ±n sorusu: {user_question}\n"
            f"LÃ¼tfen veriye dayalÄ± ÅŸekilde cevapla. KÄ±sa, Ã¶z ve anlaÅŸÄ±lÄ±r ol."
        )

        response = openai.chat.completions.create(
            model="gpt-4",
            messages=[
                {
                    "role": "system",
                    "content": "Sen veriye dayalÄ± analiz yapan bir asistan botsun."
                },
                {
                    "role": "user",
                    "content": prompt
                }
            ],
            temperature=0.2,
        )

        st.markdown("**YanÄ±t:**")
        st.success(response.choices[0].message.content)




